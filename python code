from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization

# AES Encryption/Decryption
def aes_encrypt(plain_text, key):
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(plain_text.encode(), AES.block_size))
    return cipher.iv + ct_bytes

def aes_decrypt(cipher_text, key):
    iv = cipher_text[:16]
    ct = cipher_text[16:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    pt = unpad(cipher.decrypt(ct), AES.block_size)
    return pt.decode()

# RSA Key Generation
def generate_rsa_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )
    public_key = private_key.public_key()

    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )

    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    return private_pem, public_pem, private_key, public_key

# RSA Encryption/Decryption
def rsa_encrypt(plain_text, public_key):
    encrypted = public_key.encrypt(
        plain_text.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted

def rsa_decrypt(cipher_text, private_key):
    decrypted = private_key.decrypt(
        cipher_text,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted.decode()

# Example usage
if __name__ == "__main__":
    # AES Example
    print("AES Encryption/Decryption Example:")
    aes_key = get_random_bytes(16)  # AES key must be 16, 24, or 32 bytes long
    message = "This is a secret message for AES."
    
    encrypted_aes = aes_encrypt(message, aes_key)
    print(f"Encrypted (AES): {encrypted_aes.hex()}")
    
    decrypted_aes = aes_decrypt(encrypted_aes, aes_key)
    print(f"Decrypted (AES): {decrypted_aes}\n")

    # RSA Example
    print("RSA Encryption/Decryption Example:")
    private_pem, public_pem, private_key, public_key = generate_rsa_keys()

    rsa_message = "This is a secret message for RSA."
    
    encrypted_rsa = rsa_encrypt(rsa_message, public_key)
    print(f"Encrypted (RSA): {encrypted_rsa.hex()}")
    
    decrypted_rsa = rsa_decrypt(encrypted_rsa, private_key)
    print(f"Decrypted (RSA): {decrypted_rsa}")
